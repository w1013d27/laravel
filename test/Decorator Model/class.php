<?php
namespace ClassDecorator;
interface Decorator{
    public function deal();
}
class Father implements Decorator {

    protected $decorator;
    public function __construct(Decorator $decorator)
    {
        $this->decorator = $decorator;

    }

    public function deal()
    {
        // TODO: Implement deal() method.
        $this->decorator->deal();
    }

}

class First extends Father{

    public function deal()
    {
        echo "First calling!",PHP_EOL;
        parent::deal(); // TODO: Change the autogenerated stub
    }
}
class Second extends Father{
    public function deal()
    {
        echo "Second calling",PHP_EOL;
        parent::deal(); // TODO: Change the autogenerated stub
    }
}
class Third extends Father{
    public function deal()
    {
        echo "Third calling",PHP_EOL;
        parent::deal(); // TODO: Change the autogenerated stub
    }
}

class Initial implements Decorator{
    public function deal()
    {
        echo "Initial calling!",PHP_EOL;
    //    parent::deal(); // TODO: Change the autogenerated stub
    }
}

$arr = [
__NAMESPACE__.'\\First',
__NAMESPACE__.'\\Second'    ,
    __NAMESPACE__.'\\Third',
];
$arr = array_reverse($arr);
$func = function ($class,$elem){
    return new $elem($class);
};

call_user_func(array(array_reduce($arr,$func,new Namespace\Initial()),'deal'));
